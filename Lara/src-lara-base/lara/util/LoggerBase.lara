/**
 * Logger object, for printing/saving information.
 */
var Logger = function(isGlobal, filename) {

    //(new lara$profiling$Energy$EnergyTest()).call();
    if (isGlobal) {
        println("[Logger-warning] global Logger is not implemented yet, reverting to local Logger");
        isGlobal = false;
    }

    this.currentElements = [];

    //this.functionsSetup = new Set();
    this.functionMap = {};

    this.isGlobal = isGlobal === undefined ? false : isGlobal;
    this.filename = filename;

};

// Using enum pattern described here: https://stijndewitt.com/2014/01/26/enums-in-javascript/
Logger.prototype.Type = {
    NORMAL: 1,
    INT: 2,
    DOUBLE: 3,
    STRING: 4,
    CHAR: 5,
    HEX: 6,
    OCTAL: 7,
}

/**
 * Used for both C and Java printf functions
 */
Logger.prototype.printfFormat = {
    1: undefined,
    2: "%d",
    3: "%f",
    4: "%s",
    5: "%c",
    6: "%x",
    7: "%o",
}
Logger.prototype.isGlobalFn = function() {
    println("Is Global Fn:" + this.isGlobal);
}



Logger.prototype.append = function(expr) {
    return this._append_private(expr, this.Type.NORMAL);
}

Logger.prototype.ln = function(expr) {
    return this._append_private("\\n", this.Type.NORMAL);
}

Logger.prototype.appendDouble = function(expr) {
    return this._append_private(expr, this.Type.DOUBLE);
}

Logger.prototype.appendInt = function(expr) {
    return this._append_private(expr, this.Type.INT);
}

Logger.prototype.appendString = function(expr) {
    return this._append_private(expr, this.Type.STRING);
}

Logger.prototype.appendChar = function(expr) {
    return this._append_private(expr, this.Type.CHAR);
}

Logger.prototype.appendHex = function(expr) {
    return this._append_private(expr, this.Type.HEX);
}

Logger.prototype.appendOctal = function(expr) {
    return this._append_private(expr, this.Type.OCTAL);
}


/**** PRIVATE METHODS ****/




// Private append function
Logger.prototype._append_private = function(message, type) {
    // Do not push message if empty
    if (message === "") {
        return this;
    }

    // Force type to be defined
    if (type === undefined) {
        throw "Logger: type must be defined";
    }

    this.currentElements.push({ content: message, type: type });
    return this;
}

Logger.prototype._warn = function(message) {
    println("[Logger Warning] " + message);
}

Logger.prototype._info = function(message) {
    println("[Logger] " + message);
}

// Receives an element{content, type} and returns the content with or without quotation marks, accordingly
Logger.prototype._getPrintableContent = function(element) {
    var enumType = this.Type;
    var content = element.content;
    if (element.type === enumType.NORMAL || element.type === enumType.STRING) {
        content = "\"" + content + "\"";
    } else if (element.type === enumType.CHAR) {
        content = "\'" + content + "\'";
    }
    return content;
}

/**
 * generates printf like code for c and java, 
 * @param printFunctionName the name of the function to use (printf for C, System.out.println for Java)
 */
Logger.prototype._printfFormat = function(printFunctionName) {
    // Create code from elements
    var code = printFunctionName + "(\"" +
        this.currentElements.map(function(element) {
            var enumType = this.Type;
            if (element.type === enumType.NORMAL) {
                return element.content;
            }
            //return enumType.printfFormat[element.type];
            return this.printfFormat[element.type];
        }, this).join("") + "\"";


    var valuesCode = this.currentElements
        // Filter only non-NORMAL types
        .filter(function(element) {
            var enumType = this.Type;
            return (element.type !== enumType.NORMAL);
        }, this)
        .map(function(element) {
            // Even though _getPrintableContent tests an always unmet condition (type === NORMAL) it represents a reusable piece of code for both C and C++
            return this._getPrintableContent(element);
        }, this).join(", ");

    if (valuesCode.length > 0) {
        code = code + ", " + valuesCode;
    }


    code = code + ");";
    return code;
}

/**
 *
 * @param $function Functino where name will be declared
 * @param nameGenerator function that receives no arguments and generates a new name
 */
Logger.prototype._declareName = function($function, nameGenerator) {
    // Check if thislogger was already declared in the given function
    var declaration = $function.declaration(true);
    var name = this.functionMap[declaration];

	
    if (name !== undefined) {
		alreadyDeclared = true;
        //return name;
    } else {
        name = nameGenerator(); 
        this.functionMap[declaration] = name;
		alreadyDeclared = false;
    }
	
	return {
        name: name,
        alreadyDeclared: alreadyDeclared
    };
}

