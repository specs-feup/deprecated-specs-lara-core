import lara.code.Logger;
import lara.util.TimeUnits;

/**
 * Timer object, for timing sections of code.
 */
var Timer = function(unit, filename) {
    this.timeUnits = new TimeUnits(unit);
    this.filename = filename;
    this.printUnit = true;
};

/**
 * @param printUnit boolean
 */
Timer.prototype.setPrintUnit = function(printUnit) {
    this.printUnit = printUnit;
}

/**
 * Verifies that join point start is not undefined, that it is inside a function.
 * Additionally, if $end is not undefined, checks if it is inside the same function as $start.
 *
 * [Requires] global attribute 'ancestor'. 
 *
 * @return true if $start is a valid join point for the 'time' function
 */
Timer.prototype._timeValidate = function($start, $end, functionJpName) {
    if ($start === undefined) {
        _warn("Timer: $start join point is undefined");
        return false;
    }

    var $function = $start.ancestor(functionJpName);

    if ($function === undefined) {
        println("Timer: tried to measure time at joinpoit " + $start + ", but it is not inside a function");
        return false;
    }

    if ($end !== undefined) {
        var $endFunction = $end.ancestor(functionJpName);

        if ($endFunction === undefined) {
            println("Timer: tried to end measuring time at joinpoit " + $end + ", but it is not inside a function");
            return false;
        }

        // TODO: Checking if it is the same function not implemented yet, requires attribute '$function.id'
    }

    return true;
}
