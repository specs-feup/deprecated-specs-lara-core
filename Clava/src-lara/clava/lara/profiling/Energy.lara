//import lara.util.Logger;


/**
 * Adds calls to RAPL between a section of code, measure is in Joules
 */
aspectdef MeasureEnergy
	input $jp, message, filename end

	//call loggerOut : NewLogger();
	//var logger = loggerOut.logger;

	var logger = new Logger(false, filename);

	
	// Build message
	if(message === undefined) {
		// Try to get a name
		var name = $jp.name;
		if(name === undefined) {
			message = "energy (J): ";
		} else {
			message = $jp.joinpointType + " \"" + name + "\" energy (J): ";
		}
		
		
		//if($jp.name != undefined) {
		//	message = $jp.name + " " + message;
		//}
	}

	// Add include
	$file = $jp.ancestor("file");
	if($file === undefined) {
		println("Could not find the corresponding file of the given joinpoint: " + $jp);
		return;
	}
	$file.addInclude("rapl.h", false);
	
	select $jp end
	apply
		$jp.insert before "rapl_monitor_start();";
		
		var id = _nextClavaEnergyId();
		var energyVar = "clava_energy_" + id;
		$raplResult = AstFactory.exprLiteral("rapl_monitor_report()");
		$raplResultDecl = AstFactory.varDecl(energyVar, $raplResult);
		
		// Build message
		logger.add(message).addDouble(energyVar);
				
		$jp.exec insertAfter($raplResultDecl);
		logger.log($raplResultDecl);
		
	end
	
	// Get stmt from $jp
	//$jp.toStmt;
	
end

// Global id for timers
var _clava_energy_id = 0;

function _nextClavaEnergyId() {
	var id = _clava_energy_id;
	_clava_energy_id++;
	return id;
}


