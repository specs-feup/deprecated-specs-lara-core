/**
 * Logger object, for printing/saving information.
 */
function Logger(isGlobal, filename) {
  
  if(isGlobal) {
	println("[Logger-warning] global Logger is not implemented yet, reverting to local Logger");
	isGlobal = false;
  }
  
  this.currentElements = [];
  this.functionsSetup = new Set();
  
  this.isGlobal = isGlobal === undefined ? false : isGlobal;
  this.filename = filename;
  this.isGlobalFn = isGlobalFn;
  this.add = add;
  this.addDouble = addDouble;
  this.log = log;
  
  // Private functions
  this._warn = _warn;
  this._setup = _setup;
  this._nextId = _nextId();
}

// Global id for loggers
var clava_logger_id = 0;
function _nextId() {
	var id = clava_logger_id;
	clava_logger_id++;
	return id;
}

function isGlobalFn() {  
    println("Is Global Fn:" + this.isGlobal);
}

function add(message) {
	this.currentElements.push("\"" + message + "\"");
	return this;
}

function addDouble(expr) {
	this.currentElements.push(expr);
	return this;
}

function log($jp, insertBefore) {
	
	// Verify that $jp is inside a function
	$function = $jp.ancestor("function");
	if($function === undefined) {
		_warn("Given joinpoint ("+$jp+") is not inside a function, returning");
		return;
	}
	
    if(!this._setup($function)) {
		return;
	}

	if(insertBefore === undefined) {
		insertBefore = false;
	}
	
	if(this.currentElements.length === 0) {
		_info("Nothing to log, call add() first");
		return;
	}
	
	var loggerName = "logger_" + this._nextId();
	
	// Create code from elements
	var code = "logger.msg(" + this.currentElements.join(" ,") + ");";
	println("Code:" + code);
	
	//call LoggerInsert($jp, code, insertBefore);
	$jp.exec insertAfter(code);
	
	
	
	// Clear internal state
	this.currentElements = [];
}


/**** PRIVATE METHODS ****/

function _warn(message) {
		println("[Logger Warning] " + message);
}

function _info(message) {
		println("[Logger] " + message);
}

/**
 Sets up the code for the Logger in the function that is called
 */
function _setup($function) {

	// Check if setup was already called for this function
	var declaration = $function.declaration;
	if(this.functionsSetup.has(declaration)) {
		return true;
	} else {
		this.functionsSetup.add(declaration);
	}
	
	var $file = $function.ancestor('file');
	
	// C not supported yet
	if(!$file.isCxx) {
		_warn("Cannot log on file " + $file.name + ", not yet implemented for C files, only C++");
		return false;
	}
	
	
	// Add include to Logger
	$file.addInclude("SpecsLogger.h", false);
	
	// Add declaration of correct logger

	return true;
}


