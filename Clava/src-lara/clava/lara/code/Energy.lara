import lara.code.Logger;
import lara.util.PrintOnce;

/**
 * Adds calls to RAPL between a section of code, measure is in Joules
 */
aspectdef MeasureEnergy
	input $jp, message, filename end

	// Message about dependency
	PrintOnce.message("Weaved code has dependency to project SpecsRapl, which can be found at https://github.com/specs-feup/specs-c-libs");
	//Clava.infoProjectDependency("SpecsRapl", "https://github.com/specs-feup/specs-c-libs");

	var logger = new Logger(false, filename);

	
	// Build message
	if(message === undefined) {
		// Try to get a name
		var name = $jp.name;
		if(name === undefined) {
			message = "energy (J): ";
		} else {
			message = $jp.joinpointType + " \"" + name + "\" energy (J): ";
		}
		
		
		//if($jp.name != undefined) {
		//	message = $jp.name + " " + message;
		//}
	}

	// Add include
	$file = $jp.ancestor("file");
	if($file === undefined) {
		println("Could not find the corresponding file of the given joinpoint: " + $jp);
		return;
	}
	$file.addInclude("rapl.h", false);
	
	select $jp end
	apply
		$jp.insert before "rapl_monitor_start();";
		
		var energyVar = IdGenerator.next("clava_energy_");
		
		$raplResult = AstFactory.exprLiteral("rapl_monitor_report()");
		$raplResultDecl = AstFactory.varDecl(energyVar, $raplResult);
		
		// Build message
		logger.append(message).appendDouble(energyVar);
				
		$jp.exec insertAfter($raplResultDecl);
		logger.log($raplResultDecl);
		
	end
	
	// Get stmt from $jp
	//$jp.toStmt;
	
end


