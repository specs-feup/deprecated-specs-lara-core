import lara.code.EnergyBase;
import lara.code.Logger;
import lara.util.IdGenerator;
import lara.util.PrintOnce;

Energy.prototype.measureEnergy = function($start, $end, message){
	//Check for valid joinpoints and additional conditions
	if(!this._measureValidate($start, $end, 'function')){
		return;
	}
	$end = $end === undefined?$start:$end;

	// Message about dependency
	PrintOnce.message("Weaved code has dependency to project SpecsRapl, which can be found at https://github.com/specs-feup/specs-c-libs");

	var logger = new Logger($start, this.filename);

	// Build message
	if(message === undefined) {
		// Try to get a name
		var name = $start.name;
		if(name === undefined) {
			message = "energy (J): ";
		} else {
			message = $start.joinpointType + " \\\"" + name + "\\\" energy (J): ";
		}
	}

	
	// Add include
	$file = $start.ancestor("file");
	if($file === undefined) {
		println("Could not find the corresponding file of the given joinpoint: " + $jp);
		return;
	}
	$file.addInclude("rapl.h", false);
	var energyVar = IdGenerator.next("clava_energy_output");



	var codeBefore = _energy_rapl_start();
	var codeAfter = _energy_rapl_end(energyVar);
	$start.insert("before", codeBefore);
	
	// Build message
	logger.append(message).appendDouble(energyVar);
			
	logger.log($end);
	$end.insert("after",codeAfter);

}


codedef _energy_rapl_start()%{
rapl_monitor_start();
}%end

codedef _energy_rapl_end(energyVar)%{
double [[energyVar]] = rapl_monitor_report();
}%end