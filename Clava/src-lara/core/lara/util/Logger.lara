import lara.util.LoggerBase;
import clava.Clava;

// C printf format



/*
// Taken from here: https://stackoverflow.com/questions/21346967/using-value-of-enum-as-key-in-another-enum-in-javascript
function mapKeys(object, keyMapping) {
  var mapped = {};
  for (var key in keyMapping) {
    mapped[object[key]] = keyMapping[key];
  }
  return mapped;
}


Logger.prototype.printfFormat =  mapKeys(this.Type, {
	NORMAL: undefined,
	INT: "%d"
})
*/
/*
Logger.prototype.printfFormat = {
    [Type.NORMAL]: undefined,
    [Type.INT]: "%d",
    this.TYPE.DOUBLE: "%f",
    this.TYPE.STRING: "%s",
    this.TYPE.CHAR: "%c",
    this.TYPE.HEX: "%x",
    this.TYPE.OCTAL: "%o",
}
*/

/**
 * Adds code that prints the message built up to that point with the append() functions.
 *
 * TODO: Improve this comment, add JSDoc tags
 */
Logger.prototype.log = function($jp, insertBefore) {
    var $function = this._logSetupCxx($jp, insertBefore);
    if ($function === undefined) {
        return;
    }

    var $file = $function.ancestor('file');

    var code = undefined;
    if ($file.isCxx) {
        code = this._log_cxx($file, $function);
    } else {
        code = this._log_c($file, $function);
    }

    if (code === undefined) {
        return;
    }

    //call LoggerInsert($jp, code, insertBefore);
    if (this.insertBefore) {
        $jp.insertBefore(code);
    } else {
        $jp.insertAfter(code);
    }

    // Clear internal state
    this.currentElements = [];
    return this;
}


/**** PRIVATE METHODS ****/

/**
 * Checks the initial constrains before executing the actual log (ancestor function, minimum of elements to log, defines the value of insertBefore)
 * Should be called on the beggining of each implementation of log
 * 
 * @return undefined on failure and a $function instance if successful
 */
Logger.prototype._logSetupCxx = function($jp, insertBefore) {
    // Verify that $jp is inside a function
    $function = $jp.ancestor("function");

    if ($function === undefined) {
        _warn("Given joinpoint (" + $jp + ") is not inside a function, returning");
        return undefined;
    }

    if (this.currentElements.length === 0) {
        _info("Nothing to log, call append() first");
        return undefined;
    }

    this.insertBefore = (insertBefore === undefined) ? false : insertBefore;
    return $function;
}

Logger.prototype._log_cxx = function($file, $function) {

    var loggerName = this._setup_cxx($file, $function);

    if (loggerName === undefined) {
        return;
    }

    // Create code from elements
    var code = loggerName + ".msg(" + this.currentElements.map(function(element) {
        return this._getPrintableContent(element);
    }, this).join(", ") + ");";

    return code;
}

/**
 * Sets up the code for the Logger in the file and function that is called
 */
Logger.prototype._setup_cxx = function($file, $function) {

	// Warn user about dependency to SpecsLogger library
	Clava.infoProjectDependency("SpecsLogger", "https://github.com/specs-feup/specs-c-libs");

    // Check if setup was already called for this function
    var declaration = $function.declaration(true);
    var loggerName = this.functionMap[declaration];

    if (loggerName !== undefined) {
        return loggerName;
    } else {
        loggerName = IdGenerator.next("clava_logger_");
        this.functionMap[declaration] = loggerName;
    }

    // Add include to Logger for Cpp only
    $file.addInclude("SpecsLogger.h", false);

    // Get correct logger
    var loggerDecl = undefined;

    // If filename use FileLogger 
    if (this.filename !== undefined) {
        loggerDecl = "FileLogger " + loggerName + "(\"" + this.filename + "\");";
    }
    // Otherwise, use ConsoleLogger
    else {
        loggerDecl = "ConsoleLogger " + loggerName + ";";
    }

    // Add declaration of correct logger
    $function.body.insertBegin(loggerDecl);

    return loggerName;
}

Logger.prototype._log_c = function($file, $function) {

    if (!this._setup_c($file, $function)) {
        return;
    }

    return this._printfFormat("printf");
}

/**
 * Sets up the code for the Logger in the file that is called
 */
Logger.prototype._setup_c = function($file, $function) {

    // Add stdio.h if console, not implemented yet for file
    if (this.filename !== undefined) {
        this._warn('Not implemented for C files when a "filename" is defined');
        return false;
    }

    $file.addInclude("stdio.h", true);

    return true;
}