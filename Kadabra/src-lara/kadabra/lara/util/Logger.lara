import lara.util.LoggerBase;

/**
 * Adds code that prints the message built up to that point with the append() functions.
 *
 * TODO: Improve this comment, add JSDoc tags
 */
Logger.prototype.log = function($jp, insertBefore) {
    
	// .ancestor does not support (yet?) aliased names, so it cannot retrive 'function', even if it exists in the joinpoint model
	var $function = $jp.ancestor('method');
	
   
    if ($function === undefined) {
        println("Logger: tried to insert log around joinpoit " + $jp + ", but is not inside a method");
		this._clear();
		return;
    }

	/*
    var code = this._printfFormat("System.out.printf");
    
	*/

	
	var code = this._log_code();
	if (code === undefined) {
        return;
    }

    //call LoggerInsert($jp, code, insertBefore);
    var insertBeforeString = insertBefore ? "before" : "after";
	
    $jp.insert(insertBeforeString, code);

    // Clear internal state
    this._clear();
	
    return this;
}

Logger.prototype._clear = function() {
    this.currentElements = [];
}

Logger.prototype._log_code = function() {
	if(this.filename === undefined) {
		return this._log_code_console();
	}
	
	return this._log_code_file();
}

Logger.prototype._log_code_console = function() {
	return this._printfFormat("System.out.printf");
}

Logger.prototype._log_code_file = function() {

	if(this.hasShownMessage === undefined) {
		println("Weaved code has dependency to project SpecsUtils, which can be found at https://github.com/specs-feup/specs-java-libs");	
		this.hasShownMessage = true;
	}

	var code = this._printfFormat("String.format", undefined, ")");
	
	code = "pt.up.fe.specs.util.SpecsIo.append(new java.io.File(\"" + this.filename + "\"), " + code + ");";
		
	return code;
}